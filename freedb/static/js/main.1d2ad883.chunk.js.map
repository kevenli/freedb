{"version":3,"sources":["logo.svg","http-common.js","services/freedb.service.js","components/add-db.component.js","components/db.component.js","components/db-list.compoenet.js","components/add_collection.component.js","components/collection.component.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","axios","create","baseURL","headers","http","get","id","data","post","name","delete","db_name","col_name","query","JSON","stringify","AddDb","props","onChangeName","bind","onChangeDescription","saveDb","newTutorial","state","description","published","submitted","redirectToList","e","this","setState","target","value","FreedbDataService","createDb","then","response","console","log","catch","to","className","onClick","htmlFor","type","required","onChange","Component","Tutorial","onChangeTitle","getTutorial","updatePublished","updateTutorial","deleteTutorial","currentDatabase","collections","message","match","params","title","prevState","currentTutorial","getDb","status","update","history","push","Breadcrumb","Item","href","active","map","collection","index","TutorialsList","onChangeSearchTitle","retrieveTutorials","refreshList","setActiveTutorial","removeAllTutorials","searchTitle","databases","currentIndex","TutorialDataService","getAllDb","tutorial","deleteAll","findByTitle","tutorials","db","deleteDb","placeholder","class","key","AddCollection","onChangeCollectionName","saveCollection","new_collection_name","redirectDbDetail","createCollection","preventDefault","Form","Group","controlId","Label","Control","Text","CollectionView","queryCollection","docs","total_rows","skip","paging","doc","Card","Body","undefined","App","exact","path","component","DbList","DbDetail","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"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","file":"static/js/main.1d2ad883.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import axios from \"axios\";\r\n\r\nexport default axios.create({\r\n  baseURL: \"http://localhost:8000/api\",\r\n  headers: {\r\n    \"Content-type\": \"application/json\",\r\n    \"Authorization\": \"Basic YWRtaW46MTIzNDU2\"\r\n  }\r\n});","import http from \"../http-common\";\r\n\r\nclass FreedbDataService {\r\n    getAllDb(){\r\n        return http.get('/databases');\r\n    }\r\n\r\n    getDb(id){\r\n        return http.get(`/databases/${id}`);\r\n    }\r\n\r\n    createDb(data){\r\n        return http.post('/databases', data);\r\n    }\r\n\r\n    deleteDb(name){\r\n        return http.delete(`/databases/${name}`);\r\n    }\r\n\r\n    createCollection(db_name, data){\r\n        return http.post(`/databases/${db_name}/collections`, data);\r\n    }\r\n\r\n    queryCollection(db_name, col_name, query={}){\r\n        return http.get(`/databases/${db_name}/collections/${col_name}?query=${JSON.stringify(query)}`)\r\n    }\r\n}\r\n\r\nexport default new FreedbDataService();","import React, { Component } from \"react\";\r\nimport {Redirect} from 'react-router-dom';\r\nimport FreedbDataService from \"../services/freedb.service\";\r\n\r\nexport default class AddDb extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.onChangeName = this.onChangeName.bind(this);\r\n    this.onChangeDescription = this.onChangeDescription.bind(this);\r\n    this.saveDb = this.saveDb.bind(this);\r\n    this.newTutorial = this.newTutorial.bind(this);\r\n\r\n    this.state = {\r\n      id: null,\r\n      name: \"\",\r\n      description: \"\",\r\n      published: false,\r\n\r\n      submitted: false,\r\n      redirectToList: false\r\n    };\r\n  }\r\n\r\n  onChangeName(e) {\r\n    this.setState({\r\n      name: e.target.value\r\n    });\r\n  }\r\n\r\n  onChangeDescription(e) {\r\n    this.setState({\r\n      description: e.target.value\r\n    });\r\n  }\r\n\r\n  saveDb() {\r\n    var data = {\r\n      name: this.state.name,\r\n    };\r\n\r\n    FreedbDataService.createDb(data)\r\n      .then(response => {\r\n        this.setState({\r\n          name: response.data.name,\r\n        });\r\n        this.setState({redirectToList: true});\r\n        console.log(response.data);\r\n      })\r\n      .catch(e => {\r\n        console.log(e);\r\n      });\r\n  }\r\n\r\n  newTutorial() {\r\n    this.setState({\r\n      id: null,\r\n      name: \"\",\r\n      description: \"\",\r\n      published: false,\r\n\r\n      submitted: false\r\n    });\r\n  }\r\n\r\n  render() {\r\n    if (this.state.redirectToList){\r\n      return <Redirect to='/databases' />\r\n    }\r\n    return (\r\n      <div className=\"submit-form\">\r\n        {this.state.submitted ? (\r\n          <div>\r\n            <h4>You submitted successfully!</h4>\r\n            <button className=\"btn btn-success\" onClick={this.newTutorial}>\r\n              Add\r\n            </button>\r\n          </div>\r\n        ) : (\r\n          <div>\r\n            <div className=\"form-group\">\r\n              <label htmlFor=\"title\">Title</label>\r\n              <input\r\n                type=\"text\"\r\n                className=\"form-control\"\r\n                id=\"title\"\r\n                required\r\n                value={this.state.name}\r\n                onChange={this.onChangeName}\r\n                name=\"title\"\r\n              />\r\n            </div>\r\n\r\n            <div className=\"form-group\">\r\n              <label htmlFor=\"description\">Description</label>\r\n              <input\r\n                type=\"text\"\r\n                className=\"form-control\"\r\n                id=\"description\"\r\n                required\r\n                value={this.state.description}\r\n                onChange={this.onChangeDescription}\r\n                name=\"description\"\r\n              />\r\n            </div>\r\n\r\n            <button onClick={this.saveDb} className=\"btn btn-success\">\r\n              Submit\r\n            </button>\r\n          </div>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}","import React, { Component } from \"react\";\r\nimport FreedbDataService from \"../services/freedb.service\";\r\nimport Breadcrumb from 'react-bootstrap/Breadcrumb';\r\nimport { Link } from \"react-router-dom\";\r\n\r\n\r\nexport default class Tutorial extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.onChangeTitle = this.onChangeTitle.bind(this);\r\n    this.onChangeDescription = this.onChangeDescription.bind(this);\r\n    this.getTutorial = this.getTutorial.bind(this);\r\n    this.updatePublished = this.updatePublished.bind(this);\r\n    this.updateTutorial = this.updateTutorial.bind(this);\r\n    this.deleteTutorial = this.deleteTutorial.bind(this);\r\n\r\n    this.state = {\r\n      currentDatabase: {\r\n        name: \"\",\r\n        collections: []\r\n      },\r\n      collections: [],\r\n      message: \"\",\r\n      db_name:\"\",\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.getTutorial(this.props.match.params.id);\r\n    this.setState({db_name: this.props.match.params.id});\r\n  }\r\n\r\n  onChangeTitle(e) {\r\n    const title = e.target.value;\r\n\r\n    this.setState(function(prevState) {\r\n      return {\r\n        currentDatabase: {\r\n          ...prevState.currentTutorial,\r\n          title: title\r\n        }\r\n      };\r\n    });\r\n  }\r\n\r\n  onChangeDescription(e) {\r\n    const description = e.target.value;\r\n\r\n    this.setState(prevState => ({\r\n      currentDatabase: {\r\n        ...prevState.currentTutorial,\r\n        description: description\r\n      }\r\n    }));\r\n  }\r\n\r\n  getTutorial(id) {\r\n    FreedbDataService.getDb(id)\r\n      .then(response => {\r\n        this.setState({\r\n          currentDatabase: response.data,\r\n          collections: response.data.collections\r\n        });\r\n        console.log(response.data);\r\n      })\r\n      .catch(e => {\r\n        console.log(e);\r\n      });\r\n  }\r\n\r\n  updatePublished(status) {\r\n    var data = {\r\n      id: this.state.currentTutorial.id,\r\n      title: this.state.currentTutorial.title,\r\n      description: this.state.currentTutorial.description,\r\n      published: status\r\n    };\r\n\r\n    FreedbDataService.update(this.state.currentTutorial.id, data)\r\n      .then(response => {\r\n        this.setState(prevState => ({\r\n          currentDatabase: {\r\n            ...prevState.currentTutorial,\r\n            published: status\r\n          }\r\n        }));\r\n        console.log(response.data);\r\n      })\r\n      .catch(e => {\r\n        console.log(e);\r\n      });\r\n  }\r\n\r\n  updateTutorial() {\r\n    FreedbDataService.update(\r\n      this.state.currentTutorial.id,\r\n      this.state.currentTutorial\r\n    )\r\n      .then(response => {\r\n        console.log(response.data);\r\n        this.setState({\r\n          message: \"The tutorial was updated successfully!\"\r\n        });\r\n      })\r\n      .catch(e => {\r\n        console.log(e);\r\n      });\r\n  }\r\n\r\n  deleteTutorial() {\r\n    FreedbDataService.delete(this.state.currentTutorial.id)\r\n      .then(response => {\r\n        console.log(response.data);\r\n        this.props.history.push('/tutorials')\r\n      })\r\n      .catch(e => {\r\n        console.log(e);\r\n      });\r\n  }\r\n\r\n  render() {\r\n    const { currentDatabase, collections } = this.state;\r\n\r\n    return (\r\n      <div>\r\n        <Breadcrumb>\r\n          <Breadcrumb.Item href=\"#\">Home</Breadcrumb.Item>\r\n          <Breadcrumb.Item href=\"https://getbootstrap.com/docs/4.0/components/breadcrumb/\">\r\n            Library\r\n          </Breadcrumb.Item>\r\n          <Breadcrumb.Item active>Data</Breadcrumb.Item>\r\n        </Breadcrumb>\r\n        <div>\r\n          <Link to={`/databases/${this.state.db_name}/add_collection`} >Add Collection</Link>\r\n          <table>\r\n            <tr>\r\n              <td>name</td>\r\n              <td></td>\r\n            </tr>\r\n            {collections &&\r\n            collections.map((collection, index)=>(\r\n              <tr>\r\n                <td>\r\n                  <Link to={`/databases/${this.state.currentDatabase.name}/collections/${collection.name}`}>\r\n                  {collection.name}\r\n                  </Link>\r\n                </td>\r\n                <td></td>\r\n              </tr>\r\n            ))}\r\n          </table>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}","import React, { Component } from \"react\";\r\nimport TutorialDataService from \"../services/freedb.service\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport default class TutorialsList extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.onChangeSearchTitle = this.onChangeSearchTitle.bind(this);\r\n    this.retrieveTutorials = this.retrieveTutorials.bind(this);\r\n    this.refreshList = this.refreshList.bind(this);\r\n    this.setActiveTutorial = this.setActiveTutorial.bind(this);\r\n    this.removeAllTutorials = this.removeAllTutorials.bind(this);\r\n    this.searchTitle = this.searchTitle.bind(this);\r\n\r\n    this.state = {\r\n      databases: [],\r\n      currentTutorial: null,\r\n      currentIndex: -1,\r\n      searchTitle: \"\"\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.retrieveTutorials();\r\n  }\r\n\r\n  onChangeSearchTitle(e) {\r\n    const searchTitle = e.target.value;\r\n\r\n    this.setState({\r\n      searchTitle: searchTitle\r\n    });\r\n  }\r\n\r\n  retrieveTutorials() {\r\n    TutorialDataService.getAllDb()\r\n      .then(response => {\r\n        this.setState({\r\n          databases: response.data\r\n        });\r\n        console.log(response.data);\r\n      })\r\n      .catch(e => {\r\n        console.log(e);\r\n      });\r\n  }\r\n\r\n  refreshList() {\r\n    this.retrieveTutorials();\r\n    this.setState({\r\n      currentTutorial: null,\r\n      currentIndex: -1\r\n    });\r\n  }\r\n\r\n  setActiveTutorial(tutorial, index) {\r\n    this.setState({\r\n      currentTutorial: tutorial,\r\n      currentIndex: index\r\n    });\r\n  }\r\n\r\n  removeAllTutorials() {\r\n    TutorialDataService.deleteAll()\r\n      .then(response => {\r\n        console.log(response.data);\r\n        this.refreshList();\r\n      })\r\n      .catch(e => {\r\n        console.log(e);\r\n      });\r\n  }\r\n\r\n  searchTitle() {\r\n    TutorialDataService.findByTitle(this.state.searchTitle)\r\n      .then(response => {\r\n        this.setState({\r\n          tutorials: response.data\r\n        });\r\n        console.log(response.data);\r\n      })\r\n      .catch(e => {\r\n        console.log(e);\r\n      });\r\n  }\r\n\r\n  deleteDb(db){\r\n    TutorialDataService.deleteDb(db.name)\r\n      .then(response =>{\r\n        this.refreshList();\r\n      })\r\n      .catch(e =>{\r\n        console.log(e);\r\n      });\r\n  }\r\n\r\n  render() {\r\n    const { searchTitle, databases, currentTutorial, currentIndex } = this.state;\r\n\r\n    return (\r\n      <div className=\"list row\">\r\n        <div className=\"col-md-8\">\r\n          <div className=\"input-group mb-3\">\r\n            <input\r\n              type=\"text\"\r\n              className=\"form-control\"\r\n              placeholder=\"Search by title\"\r\n              value={searchTitle}\r\n              onChange={this.onChangeSearchTitle}\r\n            />\r\n            <div className=\"input-group-append\">\r\n              <button\r\n                className=\"btn btn-outline-secondary\"\r\n                type=\"button\"\r\n                onClick={this.searchTitle}\r\n              >\r\n                Search\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"col-md-6\">\r\n          <h4>Database List</h4>\r\n          <table class=\"table\">\r\n            <tr>\r\n              <td>name</td>\r\n              <td></td>\r\n            </tr>\r\n            {databases &&\r\n              databases.map((db, index) => (\r\n                <tr>\r\n                  <td>\r\n                    <Link to={`/databases/${db.name}`}>{db.name}</Link>\r\n                  </td>\r\n                  <td>\r\n                    <a href=\"#\" class=\"btn btn-outline-danger\"\r\n                       onClick={() => this.deleteDb(db)}>\r\n                      delete\r\n                    </a>\r\n                  </td>\r\n                </tr>\r\n              ))}\r\n          </table>\r\n\r\n          <ul className=\"list-group\">\r\n            {databases &&\r\n              databases.map((db, index) => (\r\n                <li\r\n                  className={\r\n                    \"list-group-item \" +\r\n                    (index === currentIndex ? \"active\" : \"\")\r\n                  }\r\n                  onClick={() => this.setActiveTutorial(db, index)}\r\n                  key={index}\r\n                >\r\n                  {db.name}\r\n                </li>\r\n              ))}\r\n          </ul>\r\n\r\n          <button\r\n            className=\"m-3 btn btn-sm btn-danger\"\r\n            onClick={this.removeAllTutorials}\r\n          >\r\n            Remove All\r\n          </button>\r\n        </div>\r\n        <div className=\"col-md-6\">\r\n          {currentTutorial ? (\r\n            <div>\r\n              <h4>Tutorial</h4>\r\n              <div>\r\n                <label>\r\n                  <strong>Title:</strong>\r\n                </label>{\" \"}\r\n                {currentTutorial.title}\r\n              </div>\r\n              <div>\r\n                <label>\r\n                  <strong>Description:</strong>\r\n                </label>{\" \"}\r\n                {currentTutorial.description}\r\n              </div>\r\n              <div>\r\n                <label>\r\n                  <strong>Status:</strong>\r\n                </label>{\" \"}\r\n                {currentTutorial.published ? \"Published\" : \"Pending\"}\r\n              </div>\r\n\r\n              <Link\r\n                to={\"/tutorials/\" + currentTutorial.id}\r\n                className=\"badge badge-warning\"\r\n              >\r\n                Edit\r\n              </Link>\r\n            </div>\r\n          ) : (\r\n            <div>\r\n              <br />\r\n              <p>Please click on a Tutorial...</p>\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}","import React, {Component} from 'react';\r\nimport FreedbDataService from \"../services/freedb.service\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\nexport default class AddCollection extends Component{\r\n  constructor(props){\r\n    super(props);\r\n    this.onChangeCollectionName = this.onChangeCollectionName.bind(this);\r\n    this.saveCollection = this.saveCollection.bind(this);\r\n\r\n\r\n    this.state = {\r\n      db_name: \"\",\r\n      new_collection_name:\"\",\r\n      redirectDbDetail: false\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.setState({db_name: this.props.match.params.db_name})\r\n  }\r\n\r\n  onChangeCollectionName(e){\r\n    this.setState({\r\n      new_collection_name: e.target.value\r\n    });\r\n  }\r\n\r\n  saveCollection(e){\r\n    FreedbDataService.createCollection(this.state.db_name,\r\n      {name: this.state.new_collection_name})\r\n      .then(response=>{\r\n        this.setState({redirectDbDetail:true});\r\n      })\r\n      .catch(e=>{\r\n\r\n      });\r\n    e.preventDefault();\r\n  }\r\n\r\n  render(){\r\n    if (this.state.redirectDbDetail){\r\n      return <Redirect to={`/databases/${this.state.db_name}`}/>\r\n    }\r\n    return <div>\r\n      <h1>{this.state.db_name}</h1>\r\n      <Form>\r\n        <Form.Group controlId=\"formCollectionName\">\r\n          <Form.Label>Collection Name</Form.Label>\r\n          <Form.Control type=\"text\" placeholder=\"Enter collection name\"\r\n            onChange={this.onChangeCollectionName}/>\r\n          <Form.Text className=\"text-muted\" name=\"name\" >\r\n          </Form.Text>\r\n        </Form.Group>\r\n        <button onClick={this.saveCollection} className=\"btn btn-success\">\r\n              Submit\r\n            </button>\r\n      </Form>\r\n    </div>\r\n  }\r\n}","import React, {Component} from \"react\";\r\nimport Breadcrumb from \"react-bootstrap/Breadcrumb\";\r\nimport {Link} from \"react-router-dom\";\r\nimport FreedbDataService from \"../services/freedb.service\";\r\nimport { LinkContainer } from 'react-router-bootstrap'\r\nimport { Card } from 'react-bootstrap';\r\n\r\nexport default class CollectionView extends Component {\r\n  constructor(props){\r\n    super(props);\r\n    this.queryCollection = this.queryCollection.bind(this);\r\n\r\n    this.state = {\r\n      db_name: \"\",\r\n      col_name: \"\",\r\n      docs: [],\r\n      total_rows: 0,\r\n      skip: 0,\r\n      paging:{}\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.setState({\r\n      db_name: this.props.match.params.db_name,\r\n      col_name: this.props.match.params.col_name\r\n    }, ()=>{\r\n      this.queryCollection();\r\n    });\r\n  }\r\n\r\n  queryCollection(){\r\n    FreedbDataService.queryCollection(this.state.db_name, this.state.col_name)\r\n        .then(response=>{\r\n          this.setState({\r\n            docs: response.data.data,\r\n            paging: response.data.paging\r\n          })\r\n        }).catch(e=>{\r\n      console.log(e);\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const {docs} = this.state;\r\n    return <div>\r\n      <Breadcrumb>\r\n        <LinkContainer to={`/databases/${this.state.db_name}`} >\r\n        <Breadcrumb.Item>\r\n            {this.state.db_name}\r\n        </Breadcrumb.Item>\r\n        </LinkContainer>\r\n        <Breadcrumb.Item>\r\n          {this.state.col_name}\r\n        </Breadcrumb.Item>\r\n      </Breadcrumb>\r\n      {docs &&\r\n      docs.map((doc, index) => (\r\n          <Card>\r\n            <Card.Body>\r\n            <pre>\r\n              {JSON.stringify(doc, undefined, 2)}</pre>\r\n            </Card.Body>\r\n          </Card>\r\n      ))}\r\n    </div>\r\n\r\n  }\r\n}\r\n","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport logo from './logo.svg';\nimport './App.css';\n\nimport AddDb from \"./components/add-db.component\";\nimport DbDetail from \"./components/db.component\";\nimport DbList from \"./components/db-list.compoenet\";\nimport AddCollection from \"./components/add_collection.component\";\nimport CollectionView from \"./components/collection.component\";\n\nclass App extends Component{\n  render() {\n    return (\n      <Router>\n        <div>\n          <nav className=\"navbar navbar-expand navbar-dark bg-dark\">\n            <a href=\"/tutorials\" className=\"navbar-brand\">\n              bezKoder\n            </a>\n            <div className=\"navbar-nav mr-auto\">\n              <li className=\"nav-item\">\n                <Link to={\"/databases\"} className=\"nav-link\">\n                  DbList\n                </Link>\n              </li>\n              <li className=\"nav-item\">\n                <Link to={\"/add_database\"} className=\"nav-link\">\n                  AddDb\n                </Link>\n              </li>\n            </div>\n          </nav>\n\n          <div className=\"container mt-3\">\n            <Switch>\n              <Route exact path={[\"/\", \"/databases\"]} component={DbList} />\n              <Route exact path=\"/add_database\" component={AddDb} />\n              <Route exact path=\"/databases/:id\" component={DbDetail} />\n              <Route exact path=\"/databases/:db_name/add_collection\" component={AddCollection} />\n              <Route exact path=\"/databases/:db_name/collections/:col_name\" component={CollectionView} />\n            </Switch>\n          </div>\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from \"react-router-dom\";\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}